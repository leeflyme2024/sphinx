diff --git a/gobex/gobex-header.c b/gobex/gobex-header.c
index c594999a5..4aacb2a8b 100644
--- a/gobex/gobex-header.c
+++ b/gobex/gobex-header.c
@@ -51,6 +51,61 @@ struct _GObexHeader {
 	} v;
 };
 
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+	#define BETOH16(sh) ((sh>>8)|(sh<<8))
+#elif __BYTE_ORDER == __BIG_ENDIAN
+	#define BETOH16(sh) (sh)
+#else
+#error "Unknown byte order"
+#endif
+
+static char *utf16be_to_utf8(const char *instr_ch, size_t inlen_ch)
+{
+	uint16_t *instr = (uint16_t*)instr_ch;
+	size_t inlen = inlen_ch / 2;
+	uint16_t val,ext;
+	size_t in_i = 0, out_i = 0;
+	char *outstr = NULL;
+
+	if (inlen_ch % 2 != 0) {
+		error("%s(): odd number!",__func__);
+		return NULL;
+	}
+
+	outstr = g_malloc(inlen + 1);
+	if (outstr == NULL) {
+		error("%s(): g_malloc failed",__func__);
+		return NULL;
+	}
+
+	while (in_i < inlen) {
+		val = BETOH16(instr[in_i]);
+		in_i++;
+		if ((val & 0xf800) == 0xd800) {
+			if (in_i < inlen) {
+				error("%s(): cut short",__func__);
+				g_free(outstr);
+				return NULL;
+			}
+			ext = BETOH16(instr[in_i]);
+			in_i++;
+			if ( ((val & 0xfc00) != 0xd800) ||
+			     ((ext & 0xfc00) != 0xdc00) ) {
+				error("%s(): illegal sequence",
+					__func__);
+				g_free(outstr);
+				return NULL;
+			}
+			val = ((val & 0x3ff) << 10) +
+				(ext & 0x3ff) + 0x10000;
+		}
+		outstr[out_i] = val;
+		out_i++;
+	}
+	outstr[out_i++] = '\x00';
+	return outstr;
+}
+
 static glong utf8_to_utf16(gunichar2 **utf16, const char *utf8) {
 	glong utf16_len;
 	int i;
@@ -192,6 +247,7 @@ GObexHeader *g_obex_header_decode(const void *data, gsize len,
 		header->v.string = g_convert((const char *) ptr, hdr_len - 5,
 						"UTF-8", "UTF-16BE",
 						NULL, &str_len, &conv_err);
+		header->v.string = utf16be_to_utf8((const char *) ptr, hdr_len - 5);
 		if (header->v.string == NULL) {
 			g_set_error(err, G_OBEX_ERROR,
 					G_OBEX_ERROR_PARSE_ERROR,
